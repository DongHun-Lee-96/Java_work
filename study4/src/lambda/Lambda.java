package lambda;

public class Lambda {
	
	/*
	 함수형 프로그래밍을 구현하는 방식
	 클래스를 생성하지 않고 함수의 호출만으로 기능을 수행
	 순수 함수를 구현하고 호출함으로써 외부 자료에 부수적인 영향을 주지 않고 매개 변수만을 사용하도록 만든 함수
	 입력받은 자료를 기반으로 수행되고 외부에 영항을 미치지 않으므로 병렬처리에 사용 가능하다
	 안정적인 확장성 있는 프로그래밍 방식
	 
	 익명함수 만들기
	 매개 변수와 매개 변수를 활용한 실행문으로 구현 (매개변수) -> {실행문;}
	 함수 이름 반환형을 없애고 ->를 사용한다. {} 까지 실행문을 의미한다
	 
	 매개변수가(하나) 자료형과 괄호 생략가능
	 str -> {System.out.println(str);}
	 중괄호 안의 구현부가 한 문장인 경우 중괄호 생략 가능
	 str -> System.out.println(str); 
	 하지만 중괄호 안의 구현부가 한문장이어도 return문은 중괄호 생략 불가
	 str -> return str.length(); //잘못된 형식
	 하지만 중괄호 안의 구현부가 반환문 하나라면 return과 중괄호 모두 생략
	 (x,y) -> x+y;
	 str -> str.length();
	 */	
	
	/*
	 함수형 인터페이스:
	 람다식을 선언하기 위한 인터페이스
	 익명함수와 매개변수만으로 구현되므로 오직 하나의 메서드만 선언되어야 한다
	 (두개 이상이 선언되면 어떤 메서드를 호출하는지 모호해진다)
	 
	 @FunctionalInterface : 함수형 인터페이스라는 의미, 여러개의 메서드 선언에 에러 표시
	 
	 자바는 객체지향 언어로 객체를 생성해애 메서드가 호출됨
	 람다식으로 메서드를 구현하고 호출하면 내부에서 익명 클래스가 생성된다
	 */
}
