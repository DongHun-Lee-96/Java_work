package object;

public class ObjectClass {
	
	/*
	Object는 모든 클래스의 최상위 클래스
	java.lang.Object 클래스
	모든 클래서는 Object클래스의 메서드를 사용하고 재정의 할 수 있지만 final로 선언된 메서드는 재정의 불가
	
	toString() 메서드: 객체의 정보를 String으로 바꿔서 사용할때 많이 씀
	String은 문자열 반환, Integer는 정수 값 반환
    */
	
	/*
	 equals() 메서드: 두 인스턴스의 주소닶을 비교하여 t/f를 반환
	 재정의 하여 두 인스턴스가 논리적으로 동일함의 여부를 반환
	 ex.같은 학번의 학생인 경우 인스턴스들의 주소값은 다르지만 같은학생이니 문제가 생기지 않도록 equals를 재정의함 
	 */
	
	/*
	 hash: 정보를 저장, 검색하기 위해 사용하는 자료구조
	 자료의 특정 값(키 값)에 대해 저장위차를 반환해주는 해시 함수를 사용한다
	 index = hash(key)
	 해시함수는 어떤 정보인가에 따라 다르게 구현이 된다.
	 힙 메모리에 인스턴스가 저장되는 방식이 hash이며 hashcode() 메서드는 인스턴스의 저장 주소를 반환한다
	 */
	
	/*
	객체의 원본을 복제하는데 사용, 원본을 유지해 놓고 복사본을 사용할 때
	기본틀을 두고 복잡한 생성과정을 반복하지 않고 복제
	하지만 객체의 정보가 같은 인스턴스가 또 생성됨으로 정보은닉, 객체보호의 관점에서 위배될 수 있음
	객체의 clone메서드 사용을 허용한다는 의미로 cloneable 인터페이스를 명시해 줌
	 */
	
	/*
	 String 클래스
	 String을 선언하는 두가지 방법
	 String str1 = new String ("abc") //생성자의 매개변수로 문자열 생성 , 힙메모리에 생성
	 String str2 = "test" //문자열상수를 가르키는방식, 상수풀에 생성
	 한번 생성된 String값은 불변
	 */
	
	/*
	 StringBuidler, StringBuffer: 내부적으로 가변적인 char[]배열을 가지고 있는 클래스
	 문자열을 여러번 연결하거나 변경할 때 사용하면 유용, 기존 배열을 변경 함으로 garbage가 생기지 않음
	 StringBuffer은 멀티스레드 프로그래밍에서 동기화를 보장
	 단일 스레드에서는 StringBuilder를 권장, toString()메서드로 String반환
	 */
	
	/*
	 Wrapper클래스: 기본 자료형에 대한 클래스
	 autoboxing과 unboxing: integer은 객체이고 int는 4바이트 기본 자료형인데 
	 두개의 자료를 같이 연산할때 자동으로 변환이 일어남
	 */
	
	/*
	 Class 클래스: 자바의 모든 클래스와 인터페이스는 컴파일 후 class파일로 생성됨
	 class파일에는 객체의 정보(멤버변수, 메소드, 생성자 등)가 포함되어있음
	 class클래스는 컴파일된 class파일에서 객체의 정보를 가져올 수 있음
	 reflection 프로그래밍: Class클래스 이용하여 클래스의 정보를 가져오고 활용하며 인스턴스를 생성하고
	 메서드를 호출하는 등의 프로그래밍 방식
	 로컬메모리에 객체가 없어서 객체의 데이터타입을 직접 알 수 없는 경우 객체 정보만을 이용하여 프로그래밍 가능
	
	 동적 로딩이란? : 컴파일 시에 데이터 타입이 모두 binding되어 자료형이 로딩되는것(static loading)이
	 아니라 실행중에 데이터 타입을 알고 binding되는 방식
	 */
	
	
}
